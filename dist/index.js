function setup(e){const t=isConfigValid(e);if(!0!==t)throw new Error(`Options are invalid! ${t[0].message}`);return config=e,vosk.setLogLevel(config.voskLogLevel),model=new vosk.Model(config.modelPath||process.cwd()+"/model"),STTEmitter=new STTOutputEmitter,STTEmitter}function startListeningUser(e,t){if(listeningList[e])return"WARN_ALREADY_LISTENING";const n=new vosk.Recognizer({model:model,sampleRate:16e3}),i=new wav.Reader;i.on("format",async({audioFormat:s,sampleRate:o,channels:r})=>{if(1!=s||1!=r)throw new Error("Audio data must be WAV format mono PCM.");for await(const s of(new Readable).wrap(i)){const i=n.acceptWaveform(s);if(i){const i=n.result();i.text&&STTEmitter.emit("recognition",e,i.text,t.channel.guild,t.channel,t)}}n.free()});const s=new lame.Encoder({channels:2,bitDepth:16,sampleRate:48e3,bitRate:128,outSampleRate:16e3,mode:lame.MONO}),o=t.receiver.createStream(e,{mode:"pcm",end:"manual"});listeningList[e]={discordAudio:o,PCMToMP3:s,wavReader:i,rec:n,connection:t,userId:e};const r=ffmpeg().input(s).toFormat("wav").on("error",t=>{console.log("PCM > WAV, An error occurred for user",e,t.message)}).on("end",()=>{listeningList[e]=void 0});return r.pipe(i,{highWaterMark:4096}),o.pipe(s,{highWaterMark:4096}),!0}function stopListeningUser(e){return listeningList[e]?(listeningList[e].discordAudio.end(),listeningList[e]=void 0,!0):"WARN_NOT_LISTENING_ALREADY"}function stopListeningChannel(e){const t=Object.values(listeningList).filter(({connection:t})=>t.channel.id==e);t.forEach(({userId:e})=>{stopListeningUser(e)})}const{Readable:Readable,Writable:Writable}=require("stream"),wav=require("wav"),EventEmitter=require("events"),vosk=require("vosk"),ffmpeg=require("fluent-ffmpeg"),lame=require("@suldashi/lame");class STTOutputEmitter extends EventEmitter{}let STTEmitter,model,config={},listeningList={};const{isConfigValid:isConfigValid}=require("./util/validator");exports.setup=setup,exports.startListeningUser=startListeningUser,exports.stopListeningUser=stopListeningUser,exports.stopListeningChannel=stopListeningChannel,exports.listeningList=listeningList,exports.config=config;